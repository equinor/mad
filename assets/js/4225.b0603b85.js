"use strict";(self.webpackChunk_equinor_mad_platform_docs=self.webpackChunk_equinor_mad_platform_docs||[]).push([[4225],{4225:e=>{e.exports=JSON.parse('{"title":{"defaultValue":null,"description":"Optional title for the progress item","name":"title","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":true,"type":{"name":"string"}},"onRetryButtonPress":{"defaultValue":null,"description":"Callback function that is invoked when the retry button is pressed, allowing the specific failed task to be retried.\\nThe placement of this button is below the progress item as a whole. If you want this to instead only show for the failing task,\\nyou can use the `onRetryButtonPress` callback on the individual task object instead.\\n@param task The task object that failed and needs to be retried.","name":"onRetryButtonPress","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":false,"type":{"name":"(task: ProgressTask) => void"}},"onCopyTextButtonPress":{"defaultValue":null,"description":"Callback function that is invoked when the copy button is pressed, allowing the error message to be copied to the clipboard.\\nThe placement of this button is below the progress item as a whole. If you want this to instead only show for the failing task,\\nyou can use the `onCopyButtonPress` callback on the individual task object instead.\\n@param task The task object that contains the error message to be copied.","name":"onCopyTextButtonPress","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":false,"type":{"name":"(task: ProgressTask) => void"}},"tasks":{"defaultValue":{"value":"[]"},"description":"An array of tasks to be tracked by the progress item. Each task represents a unit of work whose progress or status can be monitored.\\nSpecifying `tasks` will automatically determine the overall status of the progress item based on the individual statuses of these tasks.\\nWhen `tasks` is not provided, the `status` prop can be used to manually set the overall status of the progress item.\\nThis is useful for simpler use cases where there is a single task or the progress does not need to be broken down into individual tasks.","name":"tasks","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"},{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":false,"type":{"name":"ProgressTask[]"}},"status":{"defaultValue":null,"description":"The `status` prop should not be used when `tasks` is provided. The overall status is computed based on the progress of the individual tasks.\\nManually set the overall status of the progress item. Valid statuses; \'notStarted\', \'inProgress\', \'success\', \'removed\' or \'error\'.","name":"status","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"},{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":false,"type":{"name":"ProgressStatus"}},"description":{"defaultValue":null,"description":"Optional description to show under the progress task title. Can either be a string or a function that receives the number of completed tasks and the total number of tasks and returns a string.\\nOptional description to show under the progress task title.","name":"description","declarations":[{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"},{"fileName":"mad/packages/components/src/components/Progress/ProgressItem/ProgressItem.tsx","name":"TypeLiteral"}],"required":false,"type":{"name":"string | ((completedTasks: number, totalTasks: number) => string)"}}}')}}]);