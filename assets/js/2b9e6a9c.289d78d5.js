"use strict";(self.webpackChunk_equinor_mad_platform_docs=self.webpackChunk_equinor_mad_platform_docs||[]).push([[7178],{1184:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>i});var n=a(4041);const o={},r=n.createContext(o);function c(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(r.Provider,{value:t},e.children)}},3511:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"mad-core/migration-guide/use-createCoreStackNavigator","title":"Use createStackCoreNavigator/createNativeStackCoreNavigator","description":"Learn how to use `createStackCoreNavigator`/`createNativeStackCoreNavigator`!","source":"@site/docs/mad-core/migration-guide/3-use-createCoreStackNavigator.md","sourceDirName":"mad-core/migration-guide","slug":"/mad-core/migration-guide/use-createCoreStackNavigator","permalink":"/mad/docs/mad-core/migration-guide/use-createCoreStackNavigator","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/mad/tree/main/apps/docs/shared/docs/mad-core/migration-guide/3-use-createCoreStackNavigator.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Use createStackCoreNavigator/createNativeStackCoreNavigator","description":"Learn how to use `createStackCoreNavigator`/`createNativeStackCoreNavigator`!"},"sidebar":"coreSidebar","previous":{"title":"Create a config","permalink":"/mad/docs/mad-core/migration-guide/create-a-config"},"next":{"title":"Replace react-navigation imports","permalink":"/mad/docs/mad-core/migration-guide/replace-navigation-imports"}}');var o=a(1085),r=a(1184);const c={sidebar_label:"Use createStackCoreNavigator/createNativeStackCoreNavigator",description:"Learn how to use `createStackCoreNavigator`/`createNativeStackCoreNavigator`!"},i="Use createStackCoreNavigator/createNativeStackCoreNavigator",s={},d=[];function m(e){const t={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsxs)(t.h1,{id:"use-createstackcorenavigatorcreatenativestackcorenavigator",children:["Use ",(0,o.jsx)(t.code,{children:"createStackCoreNavigator"}),"/",(0,o.jsx)(t.code,{children:"createNativeStackCoreNavigator"})]})}),"\n",(0,o.jsxs)(t.p,{children:["Next step is replacing your topmost ",(0,o.jsx)(t.code,{children:"createStackNavigator"}),"/",(0,o.jsx)(t.code,{children:"createNativeStackNavigator"})," with\n",(0,o.jsx)(t.code,{children:"createStackCoreNavigator"}),"/",(0,o.jsx)(t.code,{children:"createNativeStackCoreNavigator"})," from ",(0,o.jsx)(t.code,{children:"@equinor/mad-core"}),". It takes one\nargument: The config you created in step 2. You use it the same way you would a normal ",(0,o.jsx)(t.code,{children:"Stack"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { createNativeStackCoreNavigator } from "@equinor/mad-core";\nimport { config } from "path/to/mad.config.ts";\nimport { RootStackParamList } from "path/to/paramList.ts";\n\nconst RootStack = createNativeStackCoreNavigator<RootStackParamList>(config);\n'})}),"\n",(0,o.jsx)(t.p,{children:"or"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { createStackCoreNavigator } from "@equinor/mad-core";\nimport { config } from "path/to/mad.config.ts";\nimport { RootStackParamList } from "path/to/paramList.ts";\n\nconst RootStack = createStackCoreNavigator<RootStackParamList>(config);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["If you have leftover screens from ",(0,o.jsx)(t.code,{children:"mad-expo-core"})," in the stack, they should be removed.\n",(0,o.jsx)(t.code,{children:"createStackCoreNavigator"}),"/",(0,o.jsx)(t.code,{children:"createNativeStackCoreNavigator"})," will add similar screens for you behind\nthe scenes."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"SettingsScreen"})," also has to be added manually. This is because you most likely have app-specific\nsettings you want to hook up to the settings screen."]}),"\n",(0,o.jsxs)(t.p,{children:["If you don't have any app-specific settings, you can just add ",(0,o.jsx)(t.code,{children:"SettingsScreen"})," from\n",(0,o.jsx)(t.code,{children:"@equinor/mad-core"})," with name ",(0,o.jsx)(t.code,{children:'"Settings"'}),". If you do have app-specific settings you want to add, we\nsuggest creating a wrapper component that passes in the props you need to ",(0,o.jsx)(t.code,{children:"SettingsScreen"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"Example stack:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'const CoreStack = createNativeStackCoreNavigator<RootStackParamList>(config);\nfunction RootNavigator() {\n    return (\n        <CoreStack.Navigator>\n            <CoreStack.Screen\n                name="Root"\n                component={BottomTabNavigator}\n                options={{ headerShown: false }}\n            />\n            <CoreStack.Screen\n                name="NotFound"\n                component={NotFoundScreen}\n                options={{ title: "Oops!" }}\n            />\n            <CoreStack.Screen name="Settings" component={SampleSettingsScreen} />\n        </CoreStack.Navigator>\n    );\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"SampleSettingsScreen:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport { SettingsScreen, SettingsScreenConfiguration } from "@equinor/mad-core";\n\nexport const SampleSettingsScreen = () => {\n    const appSpecificSettingsConfig: SettingsScreenConfiguration = [\n        {\n            items: [\n                {\n                    name: "navigation",\n                    title: "navigation",\n                    onPress: () => undefined,\n                    iconName: "abacus",\n                },\n                {\n                    name: "button",\n                    title: "Button",\n                    onPress: () => undefined,\n                    iconName: "abacus",\n                    color: "primary",\n                },\n                {\n                    name: "switch",\n                    title: "Test",\n                    onChange: () => undefined,\n                    isActive: true,\n                    iconName: "abacus",\n                },\n                {\n                    name: "custom",\n                    key: "Custom",\n                    component: () => (\n                        <Cell>\n                            <Typography>This is a custom setting</Typography>\n                        </Cell>\n                    ),\n                },\n            ],\n        },\n    ];\n\n    return <SettingsScreen config={appSpecificSettingsConfig} />;\n};\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.em,{children:["note: Remember to put your content in a ",(0,o.jsx)(t.code,{children:"Cell"})," when adding custom settings"]})})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);