"use strict";(self.webpackChunk_equinor_mad_platform_docs=self.webpackChunk_equinor_mad_platform_docs||[]).push([[7178],{3511:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"mad-core/migration-guide/use-createCoreStackNavigator","title":"Use createCoreStackNavigator","description":"Learn how to use createCoreStackNavigator!","source":"@site/docs/mad-core/migration-guide/3-use-createCoreStackNavigator.md","sourceDirName":"mad-core/migration-guide","slug":"/mad-core/migration-guide/use-createCoreStackNavigator","permalink":"/mad/docs/mad-core/migration-guide/use-createCoreStackNavigator","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/mad/tree/main/apps/docs/shared/docs/mad-core/migration-guide/3-use-createCoreStackNavigator.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Use createCoreStackNavigator","description":"Learn how to use createCoreStackNavigator!"},"sidebar":"coreSidebar","previous":{"title":"Create a config","permalink":"/mad/docs/mad-core/migration-guide/create-a-config"},"next":{"title":"Replace react-navigation imports","permalink":"/mad/docs/mad-core/migration-guide/replace-navigation-imports"}}');var a=t(1085),r=t(1184);const c={sidebar_label:"Use createCoreStackNavigator",description:"Learn how to use createCoreStackNavigator!"},i="Use createCoreStackNavigator",s={},d=[];function m(e){const n={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"use-createcorestacknavigator",children:["Use ",(0,a.jsx)(n.code,{children:"createCoreStackNavigator"})]})}),"\n",(0,a.jsxs)(n.p,{children:["Next step is replacing your topmost ",(0,a.jsx)(n.code,{children:"createStackNavigator"}),"/",(0,a.jsx)(n.code,{children:"createNativeStackNavigator"})," with\n",(0,a.jsx)(n.code,{children:"createCoreStackNavigator"})," from ",(0,a.jsx)(n.code,{children:"@equinor/mad-core"}),". It takes one argument: The config you created\nin step 2. You use it the same way you would a normal ",(0,a.jsx)(n.code,{children:"Stack"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { createCoreStackNavigator } from "@equinor/mad-core";\nimport { config } from "path/to/mad.config.ts";\nimport { RootStackParamList } from "path/to/paramList.ts";\n\nconst RootStack = createCoreStackNavigator<RootStackParamList>(config);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you have leftover screens from ",(0,a.jsx)(n.code,{children:"mad-expo-core"})," in the stack, they should be removed.\n",(0,a.jsx)(n.code,{children:"createCoreStackNavigator"})," will add similar screens for you behind the scenes."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"SettingsScreen"})," also has to be added manually. This is because you most likely have app-specific\nsettings you want to hook up to the settings screen."]}),"\n",(0,a.jsxs)(n.p,{children:["If you don't have any app-specific settings, you can just add ",(0,a.jsx)(n.code,{children:"SettingsScreen"})," from\n",(0,a.jsx)(n.code,{children:"@equinor/mad-core"})," with name ",(0,a.jsx)(n.code,{children:'"Settings"'}),". If you do have app-specific settings you want to add, we\nsuggest creating a wrapper component that passes in the props you need to ",(0,a.jsx)(n.code,{children:"SettingsScreen"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Example stack:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'const CoreStack = createCoreStackNavigator<RootStackParamList>(config);\nfunction RootNavigator() {\n    return (\n        <CoreStack.Navigator>\n            <CoreStack.Screen\n                name="Root"\n                component={BottomTabNavigator}\n                options={{ headerShown: false }}\n            />\n            <CoreStack.Screen\n                name="NotFound"\n                component={NotFoundScreen}\n                options={{ title: "Oops!" }}\n            />\n            <CoreStack.Screen name="Settings" component={SampleSettingsScreen} />\n        </CoreStack.Navigator>\n    );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"SampleSettingsScreen:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { SettingsScreen, SettingsScreenConfiguration } from "@equinor/mad-core";\n\nexport const SampleSettingsScreen = () => {\n    const appSpecificSettingsConfig: SettingsScreenConfiguration = [\n        {\n            items: [\n                {\n                    name: "navigation",\n                    title: "navigation",\n                    onPress: () => undefined,\n                    iconName: "abacus",\n                },\n                {\n                    name: "button",\n                    title: "Button",\n                    onPress: () => undefined,\n                    iconName: "abacus",\n                    color: "primary",\n                },\n                {\n                    name: "switch",\n                    title: "Test",\n                    onChange: () => undefined,\n                    isActive: true,\n                    iconName: "abacus",\n                },\n                {\n                    name: "custom",\n                    key: "Custom",\n                    component: () => (\n                        <Cell>\n                            <Typography>This is a custom setting</Typography>\n                        </Cell>\n                    ),\n                },\n            ],\n        },\n    ];\n\n    return <SettingsScreen config={appSpecificSettingsConfig} />;\n};\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["note: Remember to put your content in a ",(0,a.jsx)(n.code,{children:"Cell"})," when adding custom settings"]})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(4041);const a={},r=o.createContext(a);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);