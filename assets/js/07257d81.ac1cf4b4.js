"use strict";(self.webpackChunk_equinor_mad_platform_docs=self.webpackChunk_equinor_mad_platform_docs||[]).push([[5191],{2534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"components/getting-started/breakpoints","title":"Breakpoints","description":"Integrating the built-in functionality for breakpoints into your app!","source":"@site/docs/components/getting-started/3-breakpoints.md","sourceDirName":"components/getting-started","slug":"/components/getting-started/breakpoints","permalink":"/mad/docs/components/getting-started/breakpoints","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/mad/tree/main/apps/docs/shared/docs/components/getting-started/3-breakpoints.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Breakpoints","description":"Integrating the built-in functionality for breakpoints into your app!","sidebar_position":3},"sidebar":"componentsSidebar","previous":{"title":"Styling","permalink":"/mad/docs/components/getting-started/styling"},"next":{"title":"API","permalink":"/mad/docs/components/api"}}');var i=t(1085),s=t(1184);const r={sidebar_label:"Breakpoints",description:"Integrating the built-in functionality for breakpoints into your app!",sidebar_position:3},a="Breakpoints",p={},c=[{value:"Using the <code>useBreakpoint</code> hook",id:"using-the-usebreakpoint-hook",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"breakpoints",children:"Breakpoints"})}),"\n",(0,i.jsxs)(n.p,{children:["Screens come in different sizes, and our component library is made to be viewed on both large and\nsmall. You might therefore often find yourself having to style or render compoents conditionally\nbased on screen size. This is where breakpoints and the ",(0,i.jsx)(n.code,{children:"useBreakpoint"})," hook comes in."]}),"\n",(0,i.jsxs)(n.h2,{id:"using-the-usebreakpoint-hook",children:["Using the ",(0,i.jsx)(n.code,{children:"useBreakpoint"})," hook"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useBreakpoint"})," hook returns\n",(0,i.jsx)(n.a,{href:"https://tailwindcss.com/docs/responsive-design",children:"breakpoint values from Tailwind CSS"})," based on the\ncurrent app screen width. This lets you customize your rendering logic like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { useBreakpoint, Typography } from "@equinor/mad-components";\n\nconst MyConditionalComponent = () => {\n    const breakpoint = useBreakpoint();\n\n    // If device width is less than 640\n    if (breakpoint === "xs") {\n        return <Typography>You are probably using your phone</Typography>;\n    }\n    // If it is larger\n    return <Typography>Yo this screen is large!</Typography>;\n};\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(4041);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);