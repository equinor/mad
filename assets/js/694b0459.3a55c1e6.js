"use strict";(self.webpackChunk_equinor_mad_platform_docs=self.webpackChunk_equinor_mad_platform_docs||[]).push([[4008],{1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(4041);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},3529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"components/getting-started/styling","title":"Styling","description":"Styling your app according to EDS conventions!","source":"@site/docs/components/getting-started/2-styling.md","sourceDirName":"components/getting-started","slug":"/components/getting-started/styling","permalink":"/mad/docs/components/getting-started/styling","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/mad/tree/main/apps/docs/shared/docs/components/getting-started/2-styling.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Styling","description":"Styling your app according to EDS conventions!","sidebar_position":2},"sidebar":"componentsSidebar","previous":{"title":"Installation","permalink":"/mad/docs/components/getting-started/installation"},"next":{"title":"Breakpoints","permalink":"/mad/docs/components/getting-started/breakpoints"}}');var s=t(1085),r=t(1184);const i={sidebar_label:"Styling",description:"Styling your app according to EDS conventions!",sidebar_position:2},a="Styling",c={},l=[{value:"Tokens",id:"tokens",level:2},{value:"Passing props",id:"passing-props",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"styling",children:"Styling"})}),"\n",(0,s.jsxs)(n.p,{children:["Creating stylesheets that use EDS values is made to be easy and performant. Start by creating a\n",(0,s.jsx)(n.code,{children:"EDSStyleSheet"}),", almost just like for a normal React Native ",(0,s.jsx)(n.code,{children:"StyleSheet"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const tokenStyles = EDSStyleSheet.create(token => ({\n    container: {\n        backgroundColor: token.colors.container.background,\n        borderRadius: token.geometry.border.containerBorderRadius,\n    },\n}));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We resolve our stylesheet in our components using the provided ",(0,s.jsx)(n.code,{children:"useStyles"})," hook:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const MyComponent = () => {\n    const styles = useStyles(tokenStyles);\n    return <View style={styles.container} />;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tokens",children:"Tokens"}),"\n",(0,s.jsxs)(n.p,{children:["In the last example, notice that we passed ",(0,s.jsx)(n.code,{children:"token"})," into our stylesheet. This is a resolved token\nbased on the current configuration of the app. This means that the value for\n",(0,s.jsx)(n.code,{children:"token.colors.container"})," can change between light/dark mode without you having to worry about\nanything \ud83d\ude0e. The token values are specified by EDS, letting you only care about the semantics of\nthem."]}),"\n",(0,s.jsx)(n.h2,{id:"passing-props",children:"Passing props"}),"\n",(0,s.jsxs)(n.p,{children:["Ideally, all styling, be it conditional or not should happen outside of our components to reduce\nclutter. The ",(0,s.jsx)(n.code,{children:"EDSStyleSheet.create"})," callback method accepts a second optional argument which allows\nyou to pass any additional props into the style sheet:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Notice that we type our second argument!\nconst tokenStylesWithProps = EDSStyleSheet.create((token, props: { color?: string }) => {\n    const backgroundColor = color ?? token.colors.container.background;\n\n    return {\n        container: {\n            backgroundColor,\n        },\n    };\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We are then required by our ",(0,s.jsx)(n.code,{children:"useStyle"})," hook to pass these props in with the ",(0,s.jsx)(n.code,{children:"EDSStyleSheet"})," (this is\ntypechecked):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'const MyOtherComponent = () => {\n    // Normally you\'d pass some of your component props into this hook.\n    const styles = useStyles(tokenStylesWithProps, { color: "red" });\n    return <View style={styles.container} />;\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This helps you contain your styling logic separately from your component logic. If the stylesheet\nbecomes large, you can even create your own style file (for example ",(0,s.jsx)(n.code,{children:"MyComponent.style.tsx"}),") to have\nthe stylesheet in."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);