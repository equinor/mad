var Te=Object.defineProperty,Oe=Object.defineProperties;var Ce=Object.getOwnPropertyDescriptors;var ae=Object.getOwnPropertySymbols;var qe=Object.prototype.hasOwnProperty,ve=Object.prototype.propertyIsEnumerable;var se=(n,e,r)=>e in n?Te(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r,P=(n,e)=>{for(var r in e||={})qe.call(e,r)&&se(n,r,e[r]);if(ae)for(var r of ae(e))ve.call(e,r)&&se(n,r,e[r]);return n},K=(n,e)=>Oe(n,Ce(e));var O=(n,e,r)=>new Promise((t,a)=>{var s=c=>{try{l(r.next(c))}catch(p){a(p)}},d=c=>{try{l(r.throw(c))}catch(p){a(p)}},l=c=>c.done?t(c.value):Promise.resolve(c.value).then(s,d);l((r=r.apply(n,e)).next())});var k=class extends Error{constructor(r,t,a){super(a);this.name="ApiError",this.url=t.url,this.status=t.status,this.statusText=t.statusText,this.body=t.body,this.request=r}};var X=class extends Error{constructor(e){super(e),this.name="CancelError"}get isCancelled(){return!0}},C=class{constructor(e){this._isResolved=!1,this._isRejected=!1,this._isCancelled=!1,this._cancelHandlers=[],this._promise=new Promise((r,t)=>{this._resolve=r,this._reject=t;let a=l=>{var c;this._isResolved||this._isRejected||this._isCancelled||(this._isResolved=!0,(c=this._resolve)==null||c.call(this,l))},s=l=>{var c;this._isResolved||this._isRejected||this._isCancelled||(this._isRejected=!0,(c=this._reject)==null||c.call(this,l))},d=l=>{this._isResolved||this._isRejected||this._isCancelled||this._cancelHandlers.push(l)};return Object.defineProperty(d,"isResolved",{get:()=>this._isResolved}),Object.defineProperty(d,"isRejected",{get:()=>this._isRejected}),Object.defineProperty(d,"isCancelled",{get:()=>this._isCancelled}),e(a,s,d)})}then(e,r){return this._promise.then(e,r)}catch(e){return this._promise.catch(e)}finally(e){return this._promise.finally(e)}cancel(){var e;if(!(this._isResolved||this._isRejected||this._isCancelled)){if(this._isCancelled=!0,this._cancelHandlers.length)try{for(let r of this._cancelHandlers)r()}catch(r){console.warn("Cancellation threw an error",r);return}this._cancelHandlers.length=0,(e=this._reject)==null||e.call(this,new X("Request aborted"))}}get isCancelled(){return this._isCancelled}};Symbol.toStringTag;var o={BASE:"https://api-test.gateway.equinor.com/maintenance-api",VERSION:"1.14.0",WITH_CREDENTIALS:!1,CREDENTIALS:"include",TOKEN:void 0,USERNAME:void 0,PASSWORD:void 0,HEADERS:void 0,ENCODE_PATH:void 0};import ne from"axios";import de from"form-data";var ie=n=>n!=null,Z=n=>typeof n=="string",oe=n=>Z(n)&&n!=="",le=n=>typeof n=="object"&&typeof n.type=="string"&&typeof n.stream=="function"&&typeof n.arrayBuffer=="function"&&typeof n.constructor=="function"&&typeof n.constructor.name=="string"&&/^(Blob|File)$/.test(n.constructor.name)&&/^(Blob|File)$/.test(n[Symbol.toStringTag]),We=n=>n instanceof de,Ae=n=>n>=200&&n<300,Re=n=>{try{return btoa(n)}catch(e){return Buffer.from(n).toString("base64")}},Ie=n=>{let e=[],r=(a,s)=>{e.push(`${encodeURIComponent(a)}=${encodeURIComponent(String(s))}`)},t=(a,s)=>{ie(s)&&(Array.isArray(s)?s.forEach(d=>{t(a,d)}):typeof s=="object"?Object.entries(s).forEach(([d,l])=>{t(`${a}[${d}]`,l)}):r(a,s))};return Object.entries(n).forEach(([a,s])=>{t(a,s)}),e.length>0?`?${e.join("&")}`:""},Me=(n,e)=>{let r=n.ENCODE_PATH||encodeURI,t=e.url.replace("{api-version}",n.VERSION).replace(/{(.*?)}/g,(s,d)=>{var l;return(l=e.path)!=null&&l.hasOwnProperty(d)?r(String(e.path[d])):s}),a=`${n.BASE}${t}`;return e.query?`${a}${Ie(e.query)}`:a},we=n=>{if(n.formData){let e=new de,r=(t,a)=>{Z(a)||le(a)?e.append(t,a):e.append(t,JSON.stringify(a))};return Object.entries(n.formData).filter(([t,a])=>ie(a)).forEach(([t,a])=>{Array.isArray(a)?a.forEach(s=>r(t,s)):r(t,a)}),e}},Y=(n,e)=>O(void 0,null,function*(){return typeof e=="function"?e(n):e}),Se=(n,e,r)=>O(void 0,null,function*(){let t=yield Y(e,n.TOKEN),a=yield Y(e,n.USERNAME),s=yield Y(e,n.PASSWORD),d=yield Y(e,n.HEADERS),l=typeof(r==null?void 0:r.getHeaders)=="function"&&(r==null?void 0:r.getHeaders())||{},c=Object.entries(P(P(P({Accept:"application/json"},d),e.headers),l)).filter(([p,m])=>ie(m)).reduce((p,[m,u])=>K(P({},p),{[m]:String(u)}),{});if(oe(t)&&(c.Authorization=`Bearer ${t}`),oe(a)&&oe(s)){let p=Re(`${a}:${s}`);c.Authorization=`Basic ${p}`}return e.body&&(e.mediaType?c["Content-Type"]=e.mediaType:le(e.body)?c["Content-Type"]=e.body.type||"application/octet-stream":Z(e.body)?c["Content-Type"]="text/plain":We(e.body)||(c["Content-Type"]="application/json")),c}),xe=n=>{if(n.body)return n.body},De=(n,e,r,t,a,s,d)=>O(void 0,null,function*(){let l=ne.CancelToken.source(),c={url:r,headers:s,data:t!=null?t:a,method:e.method,withCredentials:n.WITH_CREDENTIALS,cancelToken:l.token};d(()=>l.cancel("The user aborted a request."));try{return yield ne.request(c)}catch(p){let m=p;if(m.response)return m.response;throw p}}),Ee=(n,e)=>{if(e){let r=n.headers[e];if(Z(r))return r}},Be=n=>{if(n.status!==204)return n.data},Ue=(n,e)=>{let t=P({400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable"},n.errors)[e.status];if(t)throw new k(n,e,t);if(!e.ok)throw new k(n,e,"Generic Error")},i=(n,e)=>new C((r,t,a)=>O(void 0,null,function*(){try{e=K(P({},e),{query:K(P({},e.query),{"api-version":"v1"})});let s=Me(n,e),d=we(e),l=xe(e),c=yield Se(n,e,d);if(!a.isCancelled){let p=yield De(n,e,s,l,d,c,a),m=Be(p),u=Ee(p,e.responseHeader),f={url:s,ok:Ae(p.status),status:p.status,statusText:p.statusText,body:u!=null?u:m};Ue(e,f),r(f.body)}}catch(s){t(s)}}));var q=class{static lookupActivityReport({recordId:e,includeStatusDetails:r=!1,includeActivities:t=!1,includeAttachments:a=!1,includeCreatedByDetails:s=!1,includeUrlReferences:d=!1}){return i(o,{method:"GET",url:"/maintenance-records/activity-reports/{record-id}",path:{"record-id":e},query:{"include-status-details":r,"include-activities":t,"include-attachments":a,"include-created-by-details":s,"include-url-references":d},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",404:"The specified resource was not found"}})}static updateActivityReport({recordId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/maintenance-records/activity-reports/{record-id}",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"Bad request. For example that an empty text property was supplied",403:"User does not have sufficient rights to update the activity report"}})}static createActivityReport({requestBody:e}){return i(o,{method:"POST",url:"/maintenance-records/activity-reports",body:e,mediaType:"application/json",errors:{403:"User does not have sufficient rights to create a activity report"}})}static updateActivityReportStatus({recordId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/activity-reports/{record-id}/statuses/{status-id}",path:{"record-id":e,"status-id":r},body:t,mediaType:"application/json-patch+json",errors:{403:"User does not have sufficient rights to update activity report",404:"The specified resource was not found",409:"Activity report is locked by other user"}})}static addActivityReportActivities({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/activity-reports/{record-id}/activities",path:{"record-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add activities to activity report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static updateActivityReportActivity({recordId:e,activityId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/activity-reports/{record-id}/activities/{activity-id}",path:{"record-id":e,"activity-id":r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to update activities to activity report",404:"The specified resource was not found",409:"Activity report is locked by other user"}})}static downloadActivityReportAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/maintenance-records/activity-reports/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static uploadActivityReportAttachment({recordId:e,formData:r}){return i(o,{method:"POST",url:"/maintenance-records/activity-reports/{record-id}/attachments",path:{"record-id":e},formData:r,mediaType:"multipart/form-data",errors:{403:"User does not have sufficient rights to upload attachment",404:"The specified resource was not found"}})}};var v=class{static lookupCertification({recordId:e,includeStatusDetails:r=!1,includeTagDetails:t=!1,includeAttachments:a=!1,includeMeasuringPoints:s=!1,includeLastMeasurement:d=!1,includeCreatedByDetails:l=!1}){return i(o,{method:"GET",url:"/maintenance-records/certification-reports/{record-id}",path:{"record-id":e},query:{"include-status-details":r,"include-tag-details":t,"include-attachments":a,"include-measuring-points":s,"include-last-measurement":d,"include-created-by-details":l},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",404:"The specified resource was not found"}})}static searchCertificationReports({filter:e,statusId:r,plantId:t,maxDaysSinceActivation:a,createdAfterDatetime:s,includeCompleted:d=!1}){return i(o,{method:"GET",url:"/maintenance-records/certification-reports",query:{filter:e,"status-id":r,"plant-id":t,"max-days-since-activation":a,"created-after-datetime":s,"include-completed":d}})}};var W=class{static lookupCorrectiveWorkOrder({workOrderId:e,includeOperations:r=!0,includeTechnicalFeedback:t=!1,includeMaterials:a=!0,includeMaintenanceRecords:s=!1,includeAttachments:d=!1,includeStatusDetails:l=!1,includeTagDetails:c=!1,includeRelatedTags:p=!1}){return i(o,{method:"GET",url:"/work-orders/corrective-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-technical-feedback":t,"include-materials":a,"include-maintenance-records":s,"include-attachments":d,"include-status-details":l,"include-tag-details":c,"include-related-tags":p},errors:{301:"If work-order-id exist, but is not a `correctiveWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static updateCorrectiveWorkOrder({workOrderId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-orders/corrective-work-orders/{work-order-id}",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static addCorrectiveWorkOrderOperations({workOrderId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-orders/corrective-work-orders/{work-order-id}/operations",path:{"work-order-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static updateCorrectiveWorkOrderOperation({workOrderId:e,operation:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-orders/corrective-work-orders/{work-order-id}/operations/{operation}",path:{"work-order-id":e,operation:r},body:t,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static addCorrectiveWoOperationsTimeTicket({workOrderId:e,operation:r,requestBody:t}){return i(o,{method:"POST",url:"/work-orders/corrective-work-orders/{work-order-id}/operations/{operation}/time-tickets",path:{"work-order-id":e,operation:r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static downloadCorrectiveWorkOrderAttachment({workOrderId:e,attachmentId:r}){return i(o,{method:"GET",url:"/work-orders/corrective-work-orders/{work-order-id}/attachments/{attachment-id}",path:{"work-order-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static updateCorrectiveWorkOrderStatus({workOrderId:e,statusId:r,requestBody:t,completeOutstandingMaintenanceRecords:a=!0}){return i(o,{method:"PATCH",url:"/work-orders/corrective-work-orders/{work-order-id}/statuses/{status-id}",path:{"work-order-id":e,"status-id":r},query:{"complete-outstanding-maintenance-records":a},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update Work order",404:"The specified resource was not found",405:"Method not allowed. Not possible to update this status",409:"Work order is locked by other user"}})}static searchCorrectiveWorkOrder({filter:e,statusId:r,plantId:t,maxDaysSinceActivation:a,maxWorkOrders:s,areaId:d,locationId:l,requiredEndDate:c,systemId:p,maintenanceTypeId:m}){return i(o,{method:"GET",url:"/work-orders/corrective-work-orders",query:{filter:e,"status-id":r,"plant-id":t,"max-days-since-activation":a,"max-work-orders":s,"area-id":d,"location-id":l,"required-end-date":c,"system-id":p,"maintenance-type-id":m},errors:{404:"The specified resource was not found"}})}static createCorrectiveWorkOrder({requestBody:e}){return i(o,{method:"POST",url:"/work-orders/corrective-work-orders",body:e,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to create a Project Work order",404:"The specified resource was not found"}})}};var A=class{static lookupFailureReport({recordId:e,includeStatusDetails:r=!1,includeTagDetails:t=!1,includeActivities:a=!1,includeTasks:s=!1,includeAttachments:d=!1,includeAdditionalMetadata:l=!1,includeCreatedByDetails:c=!1,includeUrlReferences:p=!1}){return i(o,{method:"GET",url:"/maintenance-records/failure-reports/{record-id}",path:{"record-id":e},query:{"include-status-details":r,"include-tag-details":t,"include-activities":a,"include-tasks":s,"include-attachments":d,"include-additional-metadata":l,"include-created-by-details":c,"include-url-references":p},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",404:"The specified resource was not found"}})}static updateFailureReport({recordId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"Bad request. For example that an empty text property was supplied",403:"User does not have sufficient rights to update the failure report"}})}static updateFailureReportStatus({recordId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}/statuses/{status-id}",path:{"record-id":e,"status-id":r},body:t,mediaType:"application/json-patch+json",errors:{403:"User does not have sufficient rights to update failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static downloadFailureReportAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/maintenance-records/failure-reports/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static uploadFailureReportAttachment({recordId:e,formData:r}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports/{record-id}/attachments",path:{"record-id":e},formData:r,mediaType:"multipart/form-data",errors:{403:"User does not have sufficient rights to upload attachment",404:"The specified resource was not found"}})}static searchFailureReports({filter:e,statusId:r,plantId:t,locationId:a,systemId:s,maxDaysSinceActivation:d}){return i(o,{method:"GET",url:"/maintenance-records/failure-reports",query:{filter:e,"status-id":r,"plant-id":t,"location-id":a,"system-id":s,"max-days-since-activation":d}})}static createFailureReport({requestBody:e}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports",body:e,mediaType:"application/json",errors:{403:"User does not have sufficient rights to create a failure report"}})}static addFailureReportActivities({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports/{record-id}/activities",path:{"record-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add activities to failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static addFailureReportTasks({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports/{record-id}/tasks",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"The request body is invalid. May occur if taskResponsibleEmail is not an Equinor email address.",403:"User does not have sufficient rights to add tasks to failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static updateFailureReportTask({recordId:e,taskId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}/tasks/{task-id}",path:{"record-id":e,"task-id":r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid. May occur if taskResponsibleEmail is not an Equinor email address.",403:"User does not have sufficient rights to update failure report task",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static updateFailureReportTaskStatuses({recordId:e,taskId:r,statusId:t,requestBody:a}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}/tasks/{task-id}/statuses/{status-id}",path:{"record-id":e,"task-id":r,"status-id":t},body:a,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update failure report task",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static updateFailureReportActivity({recordId:e,activityId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}/activities/{activity-id}",path:{"record-id":e,"activity-id":r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to update activities to failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static extendFailureReportRequiredEnd({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports/{record-id}/required-end-extensions",path:{"record-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add activities to failure report",404:"The specified resource was not found",409:"Failure repot is locked by other user"}})}static updateAdditionalMetadata({recordId:e,metadataId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/failure-reports/{record-id}/additional-metadata/{metadata-id}",path:{"record-id":e,"metadata-id":r},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static addAdditionalMetadata({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/failure-reports/{record-id}/additional-metadata",path:{"record-id":e},body:r,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update failure report",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}};var R=class{static getMaintenanceConcept({conceptId:e}){return i(o,{method:"GET",url:"/maintenance-concepts/{concept-id}",path:{"concept-id":e},errors:{404:"The specified resource was not found"}})}};var I=class{static lookupMaintenancePlan({planId:e,includeItems:r=!0,includeItemCalls:t=!0}){return i(o,{method:"GET",url:"/maintenance-plans/{plan-id}",path:{"plan-id":e},query:{"include-items":r,"include-item-calls":t},errors:{404:"The specified resource was not found"}})}static lookupMaintenancePlanItem({planId:e,itemId:r,includeItemCalls:t=!0,includeItemObjectList:a=!1,includeObjectListLinkage:s=!0,includeItemTaskList:d=!1}){return i(o,{method:"GET",url:"/maintenance-plans/{plan-id}/items/{item-id}",path:{"plan-id":e,"item-id":r},query:{"include-item-calls":t,"include-item-object-list":a,"include-object-list-linkage":s,"include-item-task-list":d},errors:{404:"The specified resource was not found"}})}static updateMaintenancePlanItem({planId:e,itemId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-plans/{plan-id}/items/{item-id}",path:{"plan-id":e,"item-id":r},body:t,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static updateStatusOfMaintenancePlanItem({planId:e,itemId:r,statusId:t,requestBody:a}){return i(o,{method:"PATCH",url:"/maintenance-plans/{plan-id}/items/{item-id}/statuses/{status-id}",path:{"plan-id":e,"item-id":r,"status-id":t},body:a,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static updateTaskListOfMaintenancePlanItem({planId:e,itemId:r,taskId:t,requestBody:a}){return i(o,{method:"PATCH",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}",path:{"plan-id":e,"item-id":r,"task-id":t},body:a,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static deleteMaintenanceItemObjectLinkage({planId:e,itemId:r,taskId:t,operationId:a,objectListLinkageId:s}){return i(o,{method:"DELETE",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/object-list-linkage/{object-list-linkage-id}",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a,"object-list-linkage-id":s},errors:{404:"The specified resource was not found"}})}static createMaintenanceItemObjectLinkage({planId:e,itemId:r,taskId:t,operationId:a,requestBody:s}){return i(o,{method:"POST",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/object-list-linkage",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a},body:s,mediaType:"application/json",responseHeader:"Location",errors:{404:"The specified resource was not found"}})}static searchMaintenancePlan({filter:e,taskId:r}){return i(o,{method:"GET",url:"/maintenance-plans",query:{filter:e,"task-id":r},errors:{404:"The specified resource was not found"}})}static replaceMaintenancePackagesForOperation({planId:e,itemId:r,taskId:t,operationId:a,requestBody:s}){return i(o,{method:"PUT",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/maintenance-packages",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a},body:s,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static updateOperationForMaintenancePlanItem({planId:e,itemId:r,taskId:t,operationId:a,requestBody:s}){return i(o,{method:"PATCH",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a},body:s,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static removeOperationOfTaskListForMaintenancePlanItem({planId:e,itemId:r,taskId:t,operationId:a}){return i(o,{method:"DELETE",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a},errors:{404:"The specified resource was not found",409:"The operation constitutes concept activities, hence cannot be deleted"}})}static createOperationForMaintenancePlanItem({planId:e,itemId:r,taskId:t,requestBody:a}){return i(o,{method:"POST",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations",path:{"plan-id":e,"item-id":r,"task-id":t},body:a,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static createMaterialNeedsOfOperationForMaintenancePlanItem({planId:e,itemId:r,taskId:t,operationId:a,requestBody:s}){return i(o,{method:"POST",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/material-needs",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a},body:s,mediaType:"application/json",responseHeader:"Location",errors:{404:"The specified resource was not found"}})}static updateMaterialNeedsOfOperationForMaintenancePlanItem({planId:e,itemId:r,taskId:t,operationId:a,materialId:s,requestBody:d}){return i(o,{method:"PATCH",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/material-needs/{material-id}",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a,"material-id":s},body:d,mediaType:"application/json",errors:{404:"The specified resource was not found"}})}static removeMaterialNeedsOfOperationForMaintenancePlanItem({planId:e,itemId:r,taskId:t,operationId:a,materialId:s}){return i(o,{method:"DELETE",url:"/maintenance-plans/{plan-id}/items/{item-id}/tasks/{task-id}/operations/{operation-id}/material-needs/{material-id}",path:{"plan-id":e,"item-id":r,"task-id":t,"operation-id":a,"material-id":s},errors:{404:"The specified resource was not found"}})}};var M=class{static addRelationshipFromMaintenanceRecordToUrlReference({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-record-relationships/{record-id}/url-references",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights for updating maintenance record",404:"The specified resource was not found",409:"Maintenance record is locked by other user, characteristicsId used are not suitable for the maintenance record type or type of maintenance record not supported"}})}static removeRelationshipFromMaintenanceRecordToUrl({recordId:e,urlReferenceId:r}){return i(o,{method:"DELETE",url:"/maintenance-record-relationships/{record-id}/url-references/{url-reference-id}",path:{"record-id":e,"url-reference-id":r},errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to work order",404:"The specified resource was not found",409:"Maintenance record is locked by other user or it is not possible to remove the relationship"}})}};var w=class{static searchMaintenanceRecords({filter:e,externalPartnerRecordId:r,createdAfterDatetime:t,plantId:a,changedSinceDatetime:s,beforeDatetime:d,includeMaintenanceRecordTypes:l}){return i(o,{method:"GET",url:"/maintenance-records",query:{filter:e,"external-partner-record-id":r,"created-after-datetime":t,"plant-id":a,"changed-since-datetime":s,"before-datetime":d,"include-maintenance-record-types":l},errors:{400:"Bad request, for example if `before-datetime` is before `changed-since-datetime`",404:"The specified resource was not found"}})}};var S=class{static getMaintenanceStrategy({strategyId:e}){return i(o,{method:"GET",url:"/maintenance-strategies/{strategy-id}",path:{"strategy-id":e},errors:{404:"The specified resource was not found"}})}};var x=class{static getMaintenanceRecordsActivityCodes({maintenanceRecordId:e,catalogProfileId:r,maintenanceRecordType:t}){return i(o,{method:"GET",url:"/maintenance-records/activity-codes",query:{"maintenance-record-id":e,"catalog-profile-id":r,"maintenance-record-type":t},errors:{404:"The specified resource was not found"}})}static getMaintenanceRecordsTaskCodes({maintenanceRecordId:e,catalogProfileId:r,maintenanceRecordType:t}){return i(o,{method:"GET",url:"/maintenance-records/task-codes",query:{"maintenance-record-id":e,"catalog-profile-id":r,"maintenance-record-type":t},errors:{404:"The specified resource was not found"}})}static getMaintenanceRecordsReasonCodes({maintenanceRecordType:e}){return i(o,{method:"GET",url:"/maintenance-records/reason-codes",query:{"maintenance-record-type":e},errors:{404:"The specified resource was not found"}})}};var D=class{static getTagCatalogProfile({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/tag-catalog-profiles",path:{"plant-id":e},errors:{404:"The specified resource was not found"}})}static getLocations({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/locations",path:{"plant-id":e},errors:{404:"The specified resource was not found"}})}static getAreas({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/areas",path:{"plant-id":e},errors:{404:"The specified resource was not found"}})}static getPlannerGroups({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/planner-groups",path:{"plant-id":e},errors:{404:"The specified resource was not found"}})}static getWorkCenters({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/work-centers",path:{"plant-id":e},errors:{404:"The specified resource was not found"}})}static lookupPlant({plantId:e,includeLocations:r=!1,includeWorkCenters:t=!1,includePlannerGroups:a=!1,includeTagCatalogProfiles:s=!1,includeEquipmentCatalogProfiles:d=!1,includeOnlyDefaultCatalogProfiles:l=!1,includeSurfaceDegradationFactors:c=!1,includeRevisions:p=!1,includeSystems:m=!1}){return i(o,{method:"GET",url:"/plants/{plant-id}",path:{"plant-id":e},query:{"include-locations":r,"include-work-centers":t,"include-planner-groups":a,"include-tag-catalog-profiles":s,"include-equipment-catalog-profiles":d,"include-only-default-catalog-profiles":l,"include-surface-degradation-factors":c,"include-revisions":p,"include-systems":m},errors:{404:"The specified resource was not found"}})}static searchPlant({filter:e,plantId:r,planningPlantId:t,includeLocations:a=!1,includeWorkCenters:s=!1,includePlannerGroups:d=!1,includeTagCatalogProfiles:l=!1,includeEquipmentCatalogProfiles:c=!1,includeSurfaceDegradationFactors:p=!1}){return i(o,{method:"GET",url:"/plants",query:{filter:e,"plant-id":r,"planning-plant-id":t,"include-locations":a,"include-work-centers":s,"include-planner-groups":d,"include-tag-catalog-profiles":l,"include-equipment-catalog-profiles":c,"include-surface-degradation-factors":p},errors:{400:"Request is missing required parameters",404:"The specified resource was not found"}})}static getSurfaceDegradationFactors({plantId:e}){return i(o,{method:"GET",url:"/plants/{plant-id}/surface-degradation-factors",path:{"plant-id":e}})}static getUser({includeAuthorizations:e=!0}){return i(o,{method:"GET",url:"/user",query:{"include-authorizations":e}})}};var E=class{static getWorkOrderStandardTextTemplates({filter:e,plantId:r}){return i(o,{method:"GET",url:"/work-orders/standard-text-templates",query:{filter:e,"plant-id":r},errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights"}})}};var B=class{static lookupMeasuringPoint({pointId:e,includeLastMeasurement:r=!1,includeMeasurements:t=!1,includeQualitativeCodeGroup:a=!1,includeCharacteristics:s=!1,includeCharacteristicsWithoutValue:d=!1}){return i(o,{method:"GET",url:"/measuring-points/{point-id}",path:{"point-id":e},query:{"include-last-measurement":r,"include-measurements":t,"include-qualitative-code-group":a,"include-characteristics":s,"include-characteristics-without-value":d},errors:{404:"The specified resource was not found"}})}static updateMeasuringPoint({pointId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/measuring-points/{point-id}",path:{"point-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update measuring point",404:"The specified resource was not found",409:"Measuring point is locked by other user"}})}static searchMeasuringPoints({filter:e,plantId:r,tagPrefix:t,measuringPosition:a,quantitativeCharacteristic:s,qualitativeCodeGroup:d,measuringPointName:l,includeLastMeasurement:c=!1,includeMeasurements:p=!1,includeQualitativeCodeGroup:m=!1,includeCharacteristics:u=!1,includeCharacteristicsWithoutValue:f=!1}){return i(o,{method:"GET",url:"/measuring-points",query:{filter:e,"plant-id":r,"tag-prefix":t,"measuring-position":a,"quantitative-characteristic":s,"qualitative-code-group":d,"measuring-point-name":l,"include-last-measurement":c,"include-measurements":p,"include-qualitative-code-group":m,"include-characteristics":u,"include-characteristics-without-value":f},errors:{404:"The specified resource was not found"}})}static createMeasuringPoint({requestBody:e}){return i(o,{method:"POST",url:"/measuring-points",body:e,mediaType:"application/json",errors:{400:"Bad Request - The resource provided in the body is not according to specification",403:"User does not have sufficient rights to create a measuring point"}})}static createMeasurement({pointId:e,requestBody:r}){return i(o,{method:"POST",url:"/measuring-points/{point-id}/measurements",path:{"point-id":e},body:r,mediaType:"application/json",errors:{400:"Bad request - Can occur if quantitative and qualitative measurements provided are not supported by measuring point",403:"User does not have sufficient rights to create a measurement of measuring point"}})}static addCharacteristicsToMeasuringPoint({pointId:e,requestBody:r}){return i(o,{method:"POST",url:"/measuring-points/{point-id}/characteristics",path:{"point-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"Request is missing required parameters or characteristicId is not part of class",403:"User does not have sufficient rights to add characteristics to measuring point"}})}};var U=class{static getModificationProposal({recordId:e,includeTasks:r=!0,includeStatusDetails:t=!1,includeAttachments:a=!1,includeCreatedByDetails:s=!1}){return i(o,{method:"GET",url:"/maintenance-records/modification-proposals/{record-id}",path:{"record-id":e},query:{"include-tasks":r,"include-status-details":t,"include-attachments":a,"include-created-by-details":s},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",404:"The specified resource was not found"}})}static createModificationProposal({requestBody:e}){return i(o,{method:"POST",url:"/maintenance-records/modification-proposals",body:e,mediaType:"application/json",errors:{403:"User does not have sufficient rights to create a modification proposal"}})}static updateModificationProposalStatus({recordId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/modification-proposals/{record-id}/statuses/{status-id}",path:{"record-id":e,"status-id":r},body:t,mediaType:"application/json-patch+json",errors:{403:"User does not have sufficient rights to update activity report",404:"The specified resource was not found",409:"Activity report is locked by other user"}})}static uploadModificationProposalAttachment({recordId:e,formData:r}){return i(o,{method:"POST",url:"/maintenance-records/modification-proposals/{record-id}/attachments",path:{"record-id":e},formData:r,mediaType:"multipart/form-data",errors:{403:"User does not have sufficient rights to upload attachment",404:"The specified resource was not found"}})}static downloadModificationProposalAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/maintenance-records/modification-proposals/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r}})}};var j=class{static createModificationWorkOrder({requestBody:e}){return i(o,{method:"POST",url:"/work-orders/modification-work-orders",body:e,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to create a Project Work order",404:"The specified resource was not found"}})}static addModificationWoOperationsTimeTicket({workOrderId:e,operation:r,requestBody:t}){return i(o,{method:"POST",url:"/work-orders/modification-work-orders/{work-order-id}/operations/{operation}/time-tickets",path:{"work-order-id":e,operation:r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static lookupModificationWorkOrder({workOrderId:e,includeOperations:r=!0,includeMaterials:t=!0,includeMaintenanceRecords:a=!1,includeAttachments:s=!1,includeStatusDetails:d=!1,includeTagDetails:l=!1,includeRelatedTags:c=!1}){return i(o,{method:"GET",url:"/work-orders/modification-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-materials":t,"include-maintenance-records":a,"include-attachments":s,"include-status-details":d,"include-tag-details":l,"include-related-tags":c},errors:{301:"If work-order-id exist, but is not a `modificationWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static updateModificationWorkOrder({workOrderId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-orders/modification-work-orders/{work-order-id}",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static updateModificationWorkOrderStatus({workOrderId:e,statusId:r,requestBody:t,completeOutstandingMaintenanceRecords:a=!0}){return i(o,{method:"PATCH",url:"/work-orders/modification-work-orders/{work-order-id}/statuses/{status-id}",path:{"work-order-id":e,"status-id":r},query:{"complete-outstanding-maintenance-records":a},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update Work order",404:"The specified resource was not found",405:"Method not allowed. Not possible to update this status",409:"Work order is locked by other user"}})}};var F=class{static lookupPreventiveWorkOrder({workOrderId:e,includeOperations:r=!0,includeTechnicalFeedback:t=!1,includeMaterials:a=!1,includeMaintenanceRecords:s=!1,includeMaintenancePlanDetails:d=!1,includeAttachments:l=!1,includeStatusDetails:c=!1,includeTagDetails:p=!1,includeRelatedTags:m=!1}){return i(o,{method:"GET",url:"/work-orders/preventive-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-technical-feedback":t,"include-materials":a,"include-maintenance-records":s,"include-maintenance-plan-details":d,"include-attachments":l,"include-status-details":c,"include-tag-details":p,"include-related-tags":m},errors:{301:"If work-order-id exist, but is not a `preventiveWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static updatePreventiveWorkOrder({workOrderId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-orders/preventive-work-orders/{work-order-id}",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static addPreventiveWorkOrderOperations({workOrderId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-orders/preventive-work-orders/{work-order-id}/operations",path:{"work-order-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static updatePreventiveWorkOrderOperation({workOrderId:e,operation:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-orders/preventive-work-orders/{work-order-id}/operations/{operation}",path:{"work-order-id":e,operation:r},body:t,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static addPreventiveWoOperationsTimeTicket({workOrderId:e,operation:r,requestBody:t}){return i(o,{method:"POST",url:"/work-orders/preventive-work-orders/{work-order-id}/operations/{operation}/time-tickets",path:{"work-order-id":e,operation:r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static downloadPreventiveWorkOrderAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/work-orders/preventive-work-orders/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static updatePreventiveWorkOrderStatus({workOrderId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-orders/preventive-work-orders/{work-order-id}/statuses/{status-id}",path:{"work-order-id":e,"status-id":r},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update Work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static searchPreventiveWorkOrders({filter:e,statusId:r,plantId:t,maxDaysSinceActivation:a,workOrderId:s,earliestDate:d,maxWorkOrders:l,locationId:c,areaId:p,plannedDate:m,systemId:u,maintenanceTypeId:f}){return i(o,{method:"GET",url:"/work-orders/preventive-work-orders",query:{filter:e,"status-id":r,"plant-id":t,"max-days-since-activation":a,"work-order-id":s,"earliest-date":d,"max-work-orders":l,"location-id":c,"area-id":p,"planned-date":m,"system-id":u,"maintenance-type-id":f},errors:{404:"The specified resource was not found"}})}};var J=class{static downloadProjectWorkOrderAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/work-orders/project-work-orders/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static lookupProjectWorkOrder({workOrderId:e,includeOperations:r=!0,includeMaterials:t=!0,includeMaintenanceRecords:a=!1,includeAttachments:s=!1,includeStatusDetails:d=!1,includeTagDetails:l=!1,includeRelatedTags:c=!1}){return i(o,{method:"GET",url:"/work-orders/project-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-materials":t,"include-maintenance-records":a,"include-attachments":s,"include-status-details":d,"include-tag-details":l,"include-related-tags":c},errors:{301:"If work-order-id exist, but is not a `projectWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static updateProjectWorkOrder({workOrderId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-orders/project-work-orders/{work-order-id}",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static updateProjectWorkOrderStatus({workOrderId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-orders/project-work-orders/{work-order-id}/statuses/{status-id}",path:{"work-order-id":e,"status-id":r},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update Work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static searchProjectWorkOrders({filter:e,statusId:r,plantId:t,locationId:a,systemId:s,maxDaysSinceActivation:d}){return i(o,{method:"GET",url:"/work-orders/project-work-orders",query:{filter:e,"status-id":r,"plant-id":t,"location-id":a,"system-id":s,"max-days-since-activation":d},errors:{404:"The specified resource was not found"}})}static createProjectWorkOrder({requestBody:e}){return i(o,{method:"POST",url:"/work-orders/project-work-orders",body:e,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to create a Project Work order",404:"The specified resource was not found"}})}static addProjectWorkOrderOperations({workOrderId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-orders/project-work-orders/{work-order-id}/operations",path:{"work-order-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}};var L=class{static downloadSasChangeWorkOrderAttachment({workOrderId:e,attachmentId:r}){return i(o,{method:"GET",url:"/work-orders/sas-change-work-orders/{work-order-id}/attachments/{attachment-id}",path:{"work-order-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static lookupSasChangeWorkOrder({workOrderId:e,includeOperations:r=!0,includeMaterials:t=!0,includeMaintenanceRecords:a=!1,includeAttachments:s=!1,includeStatusDetails:d=!1,includeTagDetails:l=!1,includeRelatedTags:c=!1}){return i(o,{method:"GET",url:"/work-orders/sas-change-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-materials":t,"include-maintenance-records":a,"include-attachments":s,"include-status-details":d,"include-tag-details":l,"include-related-tags":c},errors:{301:"If work-order-id exist, but is not a `sasChangeWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static updateSasChangeWorkOrder({workOrderId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-orders/sas-change-work-orders/{work-order-id}",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update work order operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static patchSasChangeWorkOrderStatus({workOrderId:e,statusId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-orders/sas-change-work-orders/{work-order-id}/statuses/{status-id}",path:{"work-order-id":e,"status-id":r},body:t,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update Work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static searchSasChangeWorkOrders({filter:e,statusId:r,plantId:t,locationId:a,systemId:s,maxDaysSinceActivation:d}){return i(o,{method:"GET",url:"/work-orders/sas-change-work-orders",query:{filter:e,"status-id":r,"plant-id":t,"location-id":a,"system-id":s,"max-days-since-activation":d}})}static createSasChangeWorkOrder({requestBody:e}){return i(o,{method:"POST",url:"/work-orders/sas-change-work-orders",body:e,mediaType:"application/json",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to create a SAS Change Work order"}})}static addSasChangeWorkOrderOperations({workOrderId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-orders/sas-change-work-orders/{work-order-id}/operations",path:{"work-order-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"The request body is invalid",403:"User does not have sufficient rights to add operations to work order",404:"The specified resource was not found",409:"Work order is locked by other user"}})}};var G=class{static lookupSubseaWorkOrder({workOrderId:e,includeOperations:r=!0,includeMaterials:t=!0,includeAttachments:a=!1,includePersonResponsible:s=!1,includeStatusDetails:d=!1,includeRelatedTags:l=!1}){return i(o,{method:"GET",url:"/work-orders/subsea-work-orders/{work-order-id}",path:{"work-order-id":e},query:{"include-operations":r,"include-materials":t,"include-attachments":a,"include-person-responsible":s,"include-status-details":d,"include-related-tags":l},errors:{301:"If work-order-id exist, but is not a `subseaWorkOrder`, the response is a HTTP 301 Moved Permanently with the url to the resource in the HTTP header Location.\n                ",404:"The specified resource was not found"}})}static downloadSubseaWorkOrderAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/work-orders/subsea-work-orders/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}};var _=class{static lookupTag({plantId:e,tagId:r,includeMaintenanceRecords:t=!0,includeMaintenanceRecordTypes:a,includeWorkOrders:s=!0,includeWorkOrderTypes:d,includeInstalledEquipment:l=!1,includeCatalogProfileDetails:c=!1,includeMaintenancePlanItems:p=!1,includeMeasuringPoints:m=!1,includeLastMeasurement:u=!1,includeCharacteristics:f=!1,includeBillOfMaterials:h=!1}){return i(o,{method:"GET",url:"/plants/{plant-id}/tags/{tag-id}",path:{"plant-id":e,"tag-id":r},query:{"include-maintenance-records":t,"include-maintenance-record-types":a,"include-work-orders":s,"include-work-order-types":d,"include-installed-equipment":l,"include-catalog-profile-details":c,"include-maintenance-plan-items":p,"include-measuring-points":m,"include-last-measurement":u,"include-characteristics":f,"include-bill-of-materials":h},errors:{404:"The specified resource was not found"}})}static getTagHierachy({plantId:e,filter:r,rootTags:t}){return i(o,{method:"GET",url:"/plants/{plant-id}/tag-hierachy",path:{"plant-id":e},query:{filter:r,"root-tags":t},errors:{404:"The specified resource was not found"}})}static getTagHierarchy({plantId:e,filter:r,rootTagIdAnyOf:t}){return i(o,{method:"GET",url:"/plants/{plant-id}/tag-hierarchy",path:{"plant-id":e},query:{filter:r,"root-tag-id-any-of":t},errors:{404:"The specified resource was not found"}})}static getEquipmentList({plantId:e,filter:r,equipmentCategoryIdAnyOf:t}){return i(o,{method:"GET",url:"/plants/{plant-id}/equipment-list",path:{"plant-id":e},query:{filter:r,"equipment-category-id-any-of":t},errors:{404:"The specified resource was not found"}})}static lookupEquipment({equipmentId:e,includeMaintenanceRecords:r=!0,includeMaintenanceRecordTypes:t,includeOnlyOpenMaintenanceRecords:a=!1,includeWorkOrders:s=!0,includeWorkOrderTypes:d,includeOnlyOpenWorkOrders:l=!1,includeCatalogProfileDetails:c=!1,includeCharacteristics:p=!1,includeAttachments:m=!1,includeMeasuringPoints:u=!1,includeLastMeasurement:f=!1,includeStatusDetails:h=!1}){return i(o,{method:"GET",url:"/equipment/{equipment-id}",path:{"equipment-id":e},query:{"include-maintenance-records":r,"include-maintenance-record-types":t,"include-only-open-maintenance-records":a,"include-work-orders":s,"include-work-order-types":d,"include-only-open-work-orders":l,"include-catalog-profile-details":c,"include-characteristics":p,"include-attachments":m,"include-measuring-points":u,"include-last-measurement":f,"include-status-details":h},errors:{404:"The specified resource was not found"}})}static updateEquipment({equipmentId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/equipment/{equipment-id}",path:{"equipment-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update equipment",404:"The specified resource was not found",409:"Equipment is locked by other user"}})}static addCharacteristicsToEquipment({equipmentId:e,requestBody:r}){return i(o,{method:"POST",url:"/equipment/{equipment-id}/characteristics",path:{"equipment-id":e},body:r,mediaType:"application/json",responseHeader:"Location",errors:{400:"Request is missing required parameters or characteristicId is not part of class",403:"User does not have sufficient rights to add characteristics to equipment"}})}static downloadEquipmentAttachment({equipmentId:e,attachmentId:r}){return i(o,{method:"GET",url:"/equipment/{equipment-id}/attachments/{attachment-id}",path:{"equipment-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static createEquipment({requestBody:e}){return i(o,{method:"POST",url:"/equipment",body:e,mediaType:"application/json",errors:{400:"Bad request, for example if missing required properties, `equipmentCategoryId` is not `R` or if `installedAtTag` is invalid or is not in service.",403:"User does not have sufficient rights to create an equipment."}})}static searchEquipment({equipmentIdAnyOf:e,serialNumberAnyOf:r,vendorPartNumberAnyOf:t,materialIdAnyOf:a,includeMaintenanceRecords:s=!0,includeMaintenanceRecordTypes:d,includeOnlyOpenMaintenanceRecords:l=!1,includeWorkOrders:c=!0,includeWorkOrderTypes:p,includeOnlyOpenWorkOrders:m=!1,includeCharacteristics:u=!1,perPage:f=20,page:h=1}){return i(o,{method:"GET",url:"/equipment",query:{"equipment-id-any-of":e,"serial-number-any-of":r,"vendor-part-number-any-of":t,"material-id-any-of":a,"include-maintenance-records":s,"include-maintenance-record-types":d,"include-only-open-maintenance-records":l,"include-work-orders":c,"include-work-order-types":p,"include-only-open-work-orders":m,"include-characteristics":u,"per-page":f,page:h},errors:{400:"Request is missing required parameters",404:"The specified resource was not found"}})}static searchEquipmentChangeLog({filter:e,subseaWorkOrderId:r,equipmentIds:t,changedSinceDate:a}){return i(o,{method:"GET",url:"/equipment-change-log",query:{filter:e,"subsea-work-order-id":r,"equipment-ids":t,"changed-since-date":a},errors:{400:"Request is missing required parameters",404:"The specified resource was not found"}})}static searchTags({plantId:e,filter:r="by-tag-prefix",tagPrefix:t,tagIdsAnyOf:a,includeMaintenanceRecords:s=!1,includeMaintenanceRecordTypes:d,includeWorkOrders:l=!1,includeWorkOrderTypes:c,includeInstalledEquipment:p=!1,includeCatalogProfileDetails:m=!1,includeMaintenancePlanItems:u=!1,includeMeasuringPoints:f=!1,includeLastMeasurement:h=!1,includeCharacteristics:T=!1,includeBillOfMaterials:ee=!1,perPage:re=100,page:te=1}){return i(o,{method:"GET",url:"/plants/{plant-id}/tags",path:{"plant-id":e},query:{filter:r,"tag-prefix":t,"tag-ids-any-of":a,"include-maintenance-records":s,"include-maintenance-record-types":d,"include-work-orders":l,"include-work-order-types":c,"include-installed-equipment":p,"include-catalog-profile-details":m,"include-maintenance-plan-items":u,"include-measuring-points":f,"include-last-measurement":h,"include-characteristics":T,"include-bill-of-materials":ee,"per-page":re,page:te},errors:{400:"Request is missing required parameters"}})}};var H=class{static lookupTechnicalClarification({recordId:e,includeStatusDetails:r=!1,includeTasks:t=!1,includeAttachments:a=!1,includeTagDetails:s=!1,includePersonResponsible:d=!1,includeCreatedByDetails:l=!1}){return i(o,{method:"GET",url:"/maintenance-records/technical-clarifications/{record-id}",path:{"record-id":e},query:{"include-status-details":r,"include-tasks":t,"include-attachments":a,"include-tag-details":s,"include-person-responsible":d,"include-created-by-details":l},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",403:"User does not have sufficient rights to read technical clarification",404:"The specified resource was not found"}})}static updateTechnicalClarification({recordId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/maintenance-records/technical-clarifications/{record-id}",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"Bad request. For example that an empty text property was supplied",403:"User does not have sufficient rights to update the technical clarification"}})}static downloadTechnicalClarification({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/maintenance-records/technical-clarifications/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static searchTechnicalClarifications({filter:e,includePersonResponsible:r=!1,statusId:t,plantId:a,locationId:s,systemId:d,planningPlantId:l,plannerGroupId:c,maxDaysSinceActivation:p,hasPersonResponsible:m=!1,createdAfterDatetime:u,includeCompleted:f=!1,personResponsibleEmail:h}){return i(o,{method:"GET",url:"/maintenance-records/technical-clarifications",query:{"include-person-responsible":r,filter:e,"status-id":t,"plant-id":a,"location-id":s,"system-id":d,"planning-plant-id":l,"planner-group-id":c,"max-days-since-activation":p,"has-person-responsible":m,"created-after-datetime":u,"include-completed":f,"person-responsible-email":h},errors:{400:"Request is missing required parameters"}})}static createTechnicalClarifications({requestBody:e}){return i(o,{method:"POST",url:"/maintenance-records/technical-clarifications",body:e,mediaType:"application/json",errors:{403:"User does not have sufficient rights to create a technical clarification"}})}};var N=class{static lookupTechnicalInformationUpdateRequest({recordId:e,includeStatusDetails:r=!1,includeTasks:t=!1,includeAttachments:a=!1,includeTagDetails:s=!1,includePersonResponsible:d=!1,includeCreatedByDetails:l=!1}){return i(o,{method:"GET",url:"/maintenance-records/technical-information-update-requests/{record-id}",path:{"record-id":e},query:{"include-status-details":r,"include-tasks":t,"include-attachments":a,"include-tag-details":s,"include-person-responsible":d,"include-created-by-details":l},errors:{301:"The specified resource exists in another location\n                This can occur when requesting a resource which type does not match the route you are using.\n\n                Example: `/maintenance-api/resource-a/{resource-b-id}/` gives `301` response.\n                ",403:"User does not have sufficient rights to read technical information update request",404:"The specified resource was not found"}})}static updateTechnicalInformationUpdateRequest({recordId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/maintenance-records/technical-information-update-requests/{record-id}",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"Bad request. For example that an empty text property was supplied",403:"User does not have sufficient rights to update the technical information update request"}})}static downloadTechnicalInformationUpdateRequestAttachment({recordId:e,attachmentId:r}){return i(o,{method:"GET",url:"/maintenance-records/technical-information-update-requests/{record-id}/attachments/{attachment-id}",path:{"record-id":e,"attachment-id":r},errors:{404:"The specified resource was not found"}})}static uploadTechnicalInformationUpdateRequestAttachment({recordId:e,formData:r}){return i(o,{method:"POST",url:"/maintenance-records/technical-information-update-requests/{record-id}/attachments",path:{"record-id":e},formData:r,mediaType:"multipart/form-data",errors:{403:"User does not have sufficient rights to upload attachment",404:"The specified resource was not found"}})}static searchTechnicalInformationUpdateRequests({filter:e,includePersonResponsible:r=!1,statusId:t,plantId:a,locationId:s,systemId:d,tagId:l,planningPlantId:c,plannerGroupId:p,maxDaysSinceActivation:m,hasPersonResponsible:u=!1,createdAfterDatetime:f,includeCompleted:h=!1,personResponsibleEmail:T}){return i(o,{method:"GET",url:"/maintenance-records/technical-information-update-requests",query:{"include-person-responsible":r,filter:e,"status-id":t,"plant-id":a,"location-id":s,"system-id":d,"tag-id":l,"planning-plant-id":c,"planner-group-id":p,"max-days-since-activation":m,"has-person-responsible":u,"created-after-datetime":f,"include-completed":h,"person-responsible-email":T},errors:{400:"Request is missing required parameters"}})}static createTechnicalInformationUpdateRequest({requestBody:e}){return i(o,{method:"POST",url:"/maintenance-records/technical-information-update-requests",body:e,mediaType:"application/json",errors:{403:"User does not have sufficient rights to create a failure report"}})}static addTechnicalInformationUpdateRequestTasks({recordId:e,requestBody:r}){return i(o,{method:"POST",url:"/maintenance-records/technical-information-update-requests/{record-id}/tasks",path:{"record-id":e},body:r,mediaType:"application/json",errors:{400:"The request body is invalid. May occur if taskResponsibleEmail is not an Equinor email address.",403:"User does not have sufficient rights to add tasks technical information update request",404:"The specified resource was not found",409:"Technical information update request is locked by other user"}})}static updateTechnicalInformationUpdateRequestTask({recordId:e,taskId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/maintenance-records/technical-information-update-requests/{record-id}/tasks/{task-id}",path:{"record-id":e,"task-id":r},body:t,mediaType:"application/json",errors:{400:"The request body is invalid. May occur if taskResponsibleEmail is not an Equinor email address.",403:"User does not have sufficient rights to update failure report task",404:"The specified resource was not found",409:"Failure report is locked by other user"}})}static updateTechnicalInformationUpdateRequestTaskStatuses({recordId:e,taskId:r,statusId:t,requestBody:a}){return i(o,{method:"PATCH",url:"/maintenance-records/technical-information-update-requests/{record-id}/tasks/{task-id}/statuses/{status-id}",path:{"record-id":e,"task-id":r,"status-id":t},body:a,mediaType:"application/json",errors:{403:"User does not have sufficient rights to update technical information update request",404:"The specified resource was not found",409:"Technical information update request is locked by other user"}})}};var z=class{static updateWorkOrderOperation({operationId:e,requestBody:r}){return i(o,{method:"PATCH",url:"/work-order-operations/{operation-id}",path:{"operation-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}static updateTechnicalFeedback({operationId:e,technicalFeedbackId:r,requestBody:t}){return i(o,{method:"PATCH",url:"/work-order-operations/{operation-id}/technical-feedback/{technical-feedback-id}",path:{"operation-id":e,"technical-feedback-id":r},body:t,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update operation",404:"The specified resource was not found",409:"Technical feedback result requires a maintenance record to be created"}})}static addMaterialToWorkOrderOperation({operationId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-order-operations/{operation-id}/materials",path:{"operation-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters or is otherwise inconsistent",403:"User does not have sufficient rights to update operation",404:"The specified resource was not found",409:"Work order is locked by other user",501:"(__Production environment only__) Not implemented yet"}})}static removeMaterialFromWorkOrderOperation({operationId:e,reservationId:r}){return i(o,{method:"DELETE",url:"/work-order-operations/{operation-id}/materials/{reservation-id}",path:{"operation-id":e,"reservation-id":r},errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to update operation",404:"The specified resource was not found",409:"Work order is locked by other user"}})}};var $=class{static addRelationshipFromWorkOrderToMaintenanceRecord({workOrderId:e,requestBody:r}){return i(o,{method:"POST",url:"/work-order-relationships/{work-order-id}/related-maintenance-records",path:{"work-order-id":e},body:r,mediaType:"application/json",errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to work order",404:"The specified resource was not found",409:"Work order is locked by other user, maintenance record is closed or criterias for `TechnicalFeedback` are not fulfilled"}})}static removeRelationshipFromWorkOrderToMaintenanceRecord({workOrderId:e,recordId:r}){return i(o,{method:"DELETE",url:"/work-order-relationships/{work-order-id}/related-maintenance-records/{record-id}",path:{"work-order-id":e,"record-id":r},errors:{400:"Request is missing required parameters",403:"User does not have sufficient rights to work order",404:"The specified resource was not found",409:"Work order is locked by other user or it is not possible to remove the relationship"}})}};var V=class{static searchWorkOrders({filter:e,plantId:r,changedSinceDatetime:t,beforeDatetime:a,includeWorkOrderText:s,includeWorkOrderOperationText:d,includeWorkOrderTypes:l,basicEndDate:c,areaId:p,locationId:m,externalPartnerWorkOrderId:u}){return i(o,{method:"GET",url:"/work-orders",query:{filter:e,"plant-id":r,"changed-since-datetime":t,"before-datetime":a,"include-work-order-text":s,"include-work-order-operation-text":d,"include-work-order-types":l,"basic-end-date":c,"area-id":p,"location-id":m,"external-partner-work-order-id":u}})}static queryWorkOrdersOptimized({planningPlants:e,keywordsAllOf:r,keywordsAnyOf:t,keywordsNot:a,tagsAllOf:s,tagsAnyOf:d,tagsNot:l,workCentersAnyOf:c,workCentersNot:p,systemsAnyOf:m,systemsNot:u,locationsAnyOf:f,locationsNot:h,sortFieldAnyOf:T,sortFieldNot:ee,revisionCodeAnyOf:re,revisionCodeNot:te,statusAllOf:ce,statusAnyOf:pe,statusNot:me,isOpen:ue,createdAfterDate:fe,createdBeforeDate:he,workOrderTypes:ye,sortBy:be,includeText:Pe=!1,includeMaintenanceRecord:ke=!1,maxResults:ge}){return i(o,{method:"GET",url:"/work-orders-optimized-for-query",query:{"planning-plants":e,"keywords-all-of":r,"keywords-any-of":t,"keywords-not":a,"tags-all-of":s,"tags-any-of":d,"tags-not":l,"work-centers-any-of":c,"work-centers-not":p,"systems-any-of":m,"systems-not":u,"locations-any-of":f,"locations-not":h,"sort-field-any-of":T,"sort-field-not":ee,"revision-code-any-of":re,"revision-code-not":te,"status-all-of":ce,"status-any-of":pe,"status-not":me,"is-open":ue,"created-after-date":fe,"created-before-date":he,"work-order-types":ye,"sort-by":be,"include-text":Pe,"include-maintenance-record":ke,"max-results":ge}})}static searchWorkOrderChangeLog({filter:e,plantId:r,changedSinceDatetime:t,propertyName:a,includeWorkOrderTypes:s}){return i(o,{method:"GET",url:"/work-orders-change-log",query:{filter:e,"plant-id":r,"changed-since-datetime":t,"property-name":a,"include-work-order-types":s}})}};var je=({baseUrl:n,tokenFetcher:e})=>{o.BASE=n,o.TOKEN=e};var Q=class{};Q.TagAndEquipment=_,Q.MasterData=D;var y=class{};y.ActivityReports=q,y.FailureReports=A,y.ModificationProposals=U,y.CertificationReports=v,y.TechnicalInformation=N,y.TechnicalClarifications=H,y.MaintenanceRecords=w,y.MaintenanceRecordRelationships=M,y.MasterDataForMaintenanceRecords=x,y.MasterDataForWorkOrders=E;var b=class{};b.WorkOrders=V,b.WorkOrderOperations=z,b.WorkOrderRelationships=$,b.CorrectiveWorkOrders=W,b.PreventiveWorkOrders=F,b.SASChangeWorkOrders=L,b.ProjectWorkOrders=J,b.ModificationWorkOrders=j,b.SubseaWorkOrders=G;var Fe=B,g=class{};g.MaintenancePlans=I,g.MaintenanceConcepts=R,g.MaintenanceStrategies=S;export{g as MaintenanceProgram,y as MaintenanceRecords,Fe as MeasuringPoints,Q as Plants,b as WorkOrders,je as initializeMaintenanceApi};
